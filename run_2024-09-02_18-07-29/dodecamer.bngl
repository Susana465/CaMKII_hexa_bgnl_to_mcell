begin model

begin parameters
	# Default diffusion constants will require updating
	D_VOL 1e-6 # cm^2/s
	D_SURF 1e-8 # cm^2/s
	MCELL_DIFFUSION_CONSTANT_3D_Ca D_VOL
	MCELL_DIFFUSION_CONSTANT_3D_PP1 D_VOL
	MCELL_DIFFUSION_CONSTANT_3D_CaM D_VOL
	MCELL_DIFFUSION_CONSTANT_3D_CaMKII D_VOL
	MCELL_DIFFUSION_CONSTANT_2D_NMDAR D_SURF

	NA_um3 6.022e8 # Avogadro's number mutiplied by 1e-15 since we are using volume units of microns(^-3)
	VOL_RXN 1
	MCELL_REDEFINE_NA_um3 VOL_RXN # In MCell the units get multiplied by V_RXN so they stay the same

	# number of iterations for MCell
    ITERATIONS 5e3

	# Initial number of Ca molecules/cell
  	Ca_i 10000 
	CaM_i 2000
	CaMKII_i 2000
	PP1_i 1000
	NMDAR_i 300

    # R1 to R4:  
 	kon_1_CaCaM 2.57e8/NA_um3   # Bimolecular rate constant for CaM-Ca binding (1/M 1/s)
	kon_2_CaCaM 2.29e5/NA_um3
	kon_3_CaCaM 2.14e7/NA_um3
	kon_4_CaCaM 1.10e8/NA_um3

	koff_1CaCaM 1.04e3   # Unimolecular rate constant for CaM_Ca unbinding (1/s)
	koff_2CaCaM 3.9e-1
	koff_3CaCaM 7.42e2
	koff_4CaCaM 9.8e2

	# 5.1 CaMKII + CaM_Ca4  -> CaMKII_CaM_Ca4 (neeed to double check?)
	kon_cam_ca4_camkii 0 #4.2e6/NA_um3 
	koff_cam_ca4_camkii 0 #2.5e-4
	koff_CaM_Ca4_CaMKII286_P 0 #1.95
	koff_CaM_Ca4_CaMKII286_0 0 #

    # CaMKII flicker open/closed (from pharris et al.,)
    kon_camkii_act 0 #2e4
	koff_camkii_inact 0 #1e7

	# CaMKII phosphorylation
	k_P_CaMKII286 0 #1e1/NA_um3 #0.96 #1/s #ref ordyan (1e5 in monomer model for susana's diss)
	k_P_CaMKII306 0 #0.02 

	# Dephosphorylation ordyan
	# k_cat = (31/1.25)/60 # where do these numbers come from?
	# K_m = 11*(NA*V) #uM 

	k_cat 0 #2e1/NA_um3  # Pharris et al., number

	# CaMKII_open (and unbound to CaM) binding to NMDARs
	kon_CaMKII_NMDAR 0 #3e5/NA_um3 #taken from 2nd_year PhD report
	koff_CaMKII_NMDAR 0 #0.284

	# CaMKII_P (and unbound to CaM) binding to NMDARs
	kon_CaMKII_P_NMDAR 0 #2e6/NA_um3 #taken from 2nd_year PhD report
	koff_CaMKII_P_NMDAR 0 #0.03

	# Units: volumes in um3
	VolCP 0.50588 
	VolPM 0.0307 # from volume of 0.505 r = 0.494 and area = 3.07um2 * 0.01um thickness. Assuming a thickness of 0.01 microns for the PM
end parameters

begin compartments
 	PM 2 VolPM #2Dimensions, surface compartment
 	CP 3 VolCP PM #3Dimensions and 1 microcubic in volume, volume compartment
 	# http://www.lehman.edu/academics/cmacs/documents/RuleBasedPrimer-2011.pdf
end compartments

begin molecule types
  Ca()
  PP1()
  CaM(ca~0~1~2~3~4,camkii)
  CaMKII(open~0~1,T286~0~P,T306~0~P,cam,nmdar,l,r,c)
  NMDAR(camkii)
end molecule types

begin species
@CP:Ca() Ca_i
@CP:CaM(ca~0,camkii) CaM_i
# CaMKII dodecamer: CaMKII_i
@CP:CaMKII(cam,nmdar,T286~0,T306~0,open~0,l!6,r!1,c!13).CaMKII(cam,nmdar,T286~0,T306~0,open~0,l!1,r!2,c!14).CaMKII(cam,nmdar,T286~0,T306~0,open~0,l!2,r!3,c!15).CaMKII(cam,nmdar,T286~0,T306~0,open~0,l!3,r!4,c!16).CaMKII(cam,nmdar,T286~0,T306~0,open~0,l!4,r!5,c!17).CaMKII(cam,nmdar,T286~0,T306~0,open~0,l!5,r!6,c!18).CaMKII(cam,nmdar,T286~0,T306~0,open~0,l!12,r!7,c!13).CaMKII(cam,nmdar,T286~0,T306~0,open~0,l!7,r!8,c!14).CaMKII(cam,nmdar,T286~0,T306~0,open~0,l!8,r!9,c!15).CaMKII(cam,nmdar,T286~0,T306~0,open~0,l!9,r!10,c!16).CaMKII(cam,nmdar,T286~0,T306~0,open~0,l!10,r!11,c!17).CaMKII(cam,nmdar,T286~0,T306~0,open~0,l!11,r!12,c!18) CaMKII_i

@CP:PP1() PP1_i
@PM:NMDAR(camkii) NMDAR_i
end species

begin reaction rules
# Ca binds to CaM progresively
#1  Ca + CaM < - > CaM_Ca1
	CaM(ca~0,camkii) + Ca() <-> CaM(ca~1,camkii) kon_1_CaCaM, koff_1CaCaM
#2  Ca + CaM_Ca1 < - > CaM_Ca2
 	CaM(ca~1,camkii) + Ca() <-> CaM(ca~2,camkii) kon_2_CaCaM, koff_2CaCaM
#3  Ca + CaM_Ca2 < - > CaM_Ca3
	CaM(ca~2,camkii) + Ca() <-> CaM(ca~3,camkii) kon_3_CaCaM, koff_3CaCaM
#4  Ca + CaM_Ca3 < - > CaM_Ca4
	CaM(ca~3,camkii) + Ca() <-> CaM(ca~4,camkii) kon_4_CaCaM, koff_4CaCaM

# CaMKII subunits can flicker between open or closed. (CaM binds to open CaMKII only, "once arm and hand are open")
# Is T286~0 a requirement, why? can it not flicker if its P?
 	CaMKII(cam,T286~0,nmdar,open~0) <-> CaMKII(cam,T286~0,nmdar,open~1) kon_camkii_act, koff_camkii_inact

# 5.1 CaMKII + CaM_Ca4 < - > CaMKII_CaM 
# Saturated CaM_Ca4 binds to CaMKII ring, T306 needs to be unphosphorylated
# This reaction will only start happening after flickering of CaMKII to open state (next reaction) happens. 
# This is because CaMKII released into the system is initially open~0.

# CaM binding affinity will be different depending on whether camkii is phosphorylated or not, should specify this for the forward reaction as well as for dissociation

	CaM(ca~4,camkii) + CaMKII(cam,T306~0,open~1) -> CaM(ca~4,camkii!1).CaMKII(cam!1,T306~0,open~1) kon_cam_ca4_camkii

# CaM rxn rate binding to phosphorylated CaMKII would be different than binding to CaMKII_P~0, do we need to specify this? 
# there isnt much of a difference between rates of kon for camkii p and camkii not p 
# (see kon from maryam, bartol and meyer - add this to discussion on thesis - decide if to add reaction or explanation)

# Right now CaM binding does not induce phosphorylation of CaMKII? CaM stabilises open state of camkii, and makes phosphorylation more likely to happen. 

# CaM unbinding from either P or unP CaMKII, above CaM can bind to CaMKII no matter the T286 P state, requirement is that it's open and unP at T306.
# If T286~P, a subunit may remain open and phosphorylated even upon unbding of CaM
# Specification of open~1 is not necessary, because if bound to CaM is open anyway.
	CaMKII(T286~P,cam!2).CaM(ca~4,camkii!2) -> CaMKII(T286~P,cam) + CaM(ca~4,camkii) koff_CaM_Ca4_CaMKII286_P

# If T286~0, a subunit may remain open and unphosphorylated even upon unbding of CaM (i predict there wont be much of this? depening on rxn rate, but once camkii open, it prefers to be P?)
	CaMKII(T286~0,cam!2).CaM(ca~4,camkii!2) -> CaMKII(T286~0,cam) + CaM(ca~4,camkii) koff_CaM_Ca4_CaMKII286_0

# CaMKII T286 phosphorylation 
# For the way this model is written, what is needed for T286 P is that CaMKII subunit and its neighbour are both open 
# (no matter if bound to cam or nmdar in terms of writing down reaction - rule based dcdw)
# If two neighbouring subunits are open, one may autoP the other at T286
	CaMKII(l!1,open~1).CaMKII(r!1,T286~0,open~1) -> CaMKII(l!1,open~1).CaMKII(r!1,T286~P,open~1) k_P_CaMKII286 # what is the reaction rate?
# This is the first (or any) phophorylation to happen. 
# if I add the condition that one subunit needs to be p from the beginning, how does any camkii p happen? this condition needs to be like this to allow for camkii p. 

# CaMKII T306 phosphorylation

# If CaMKII open, and T286~P, then t306 can become P, rendering subunit into an closed state. Once T306~P, t286 may or may not remain P, it is not a necessary condition so we leave it unspecified. 
# CaMKII T306 P cannot happen if bound to NMDAR, so there is the condition that for camkii t306 p to happen, nmdar site needs to be unbound. 
	CaMKII(cam,nmdar,T306~0,open~1) -> CaMKII(cam,nmdar,T306~P,open~1) k_P_CaMKII306
# It's more likely camkii will be open when T286P~1, so more likely to find camkii_t286P_open and therefore morelikely this will be also P in 306 but it is not a condition.
# it prevents cam from binding, and when cam is not binding, camkii can close, so more likley to become closed/inactive.
# camkii can then close or open according to flickering reaction above.

# CaM binding to CaMKII with unphosphorylated T306 prevents phosphorylation of this residue
# In other words, if CaMKII bound to CaM with t306~0, t306~p cannot happen. 

# CaMKII dephosphorylation. 
# The presence of CaM would structurally impede PP action, so cam binding site needs to be free for PP desphosphorylation.
# This means that CaM binding protects CaMKII_P state as PP1 cannot access it and dephospho otherwise.
	CaMKII(T286~P,cam) + PP1 -> CaMKII(T286~0,cam) + PP1 k_cat 
# CaMKII(T306~P, cam) not necessary to state cam unbound because cam will not be bound to camkii if T306P as stated in line 130
	CaMKII(T306~P) + PP1 -> CaMKII(T306~0) + PP1 k_cat 

# NMDAR/CaMKII binding
# CaMKII open can bind and unbind to NMDAR - cam binding site and nmdar binding site don't overlap so cam can be bound to camkii
	CaMKII(open~1,nmdar) + NMDAR(camkii) <-> CaMKII(open~1,nmdar!1).NMDAR(camkii!1) kon_CaMKII_NMDAR, koff_CaMKII_NMDAR

# what is needed is CaMKII to be open (not phosphorylated), only one subunit will be the requirement for this reaction. 
# CaMKII_P can bind and unbind to NMDAR ** q. does it matter if only one subunit is P, or should all subunits be P? how about open and P? look at notes from literature
	#CaMKII(T286~P,cam,nmdar) + NMDAR(camkii) <-> CaMKII(T286~P,cam,nmdar!1).NMDAR(camkii!1) kon_CaMKII_NMDAR, koff_CaMKII_NMDAR
	
end reaction rules

begin observables
  	Molecules CaM_free CaM(ca~0,camkii)
	Molecules CaM_Ca1 CaM(ca~1,camkii)
	Molecules CaM_Ca2 CaM(ca~2,camkii)
	Molecules CaM_Ca3 CaM(ca~3,camkii)
	Molecules CaM_Ca4 CaM(ca~4,camkii)

	#Molecules CaMKII_CaM_Ca4 CaM(ca~4,camkii!1).CaMKII(cam!1) # all of camkii_ca4

	#Molecules CaMKII_CaM_Ca4_P0 CaM(ca~4,camkii!1).CaMKII(cam!1,T286~0,T306~0,nmdar)

	#Species CaMKII_free_closed_P0 CaMKII(cam,nmdar,T286~0,T306~0,open~0,l!6,r!1,c!13).CaMKII(cam,nmdar,T286~0,T306~0,open~0,l!1,r!2,c!14).CaMKII(cam,nmdar,T286~0,T306~0,open~0,l!2,r!3,c!15).CaMKII(cam,nmdar,T286~0,T306~0,open~0,l!3,r!4,c!16).CaMKII(cam,nmdar,T286~0,T306~0,open~0,l!4,r!5,c!17).CaMKII(cam,nmdar,T286~0,T306~0,open~0,l!5,r!6,c!18).CaMKII(cam,nmdar,T286~0,T306~0,open~0,l!12,r!7,c!13).CaMKII(cam,nmdar,T286~0,T306~0,open~0,l!7,r!8,c!14).CaMKII(cam,nmdar,T286~0,T306~0,open~0,l!8,r!9,c!15).CaMKII(cam,nmdar,T286~0,T306~0,open~0,l!9,r!10,c!16).CaMKII(cam,nmdar,T286~0,T306~0,open~0,l!10,r!11,c!17).CaMKII(cam,nmdar,T286~0,T306~0,open~0,l!11,r!12,c!18)

    #Molecules CaMKII_open_T286P0 CaMKII(T286~0,open~1)
	#Molecules CaMKII_closed_T286P0 CaMKII(T286~0,open~0)
	#Molecules CaMKII_ring_open CaMKII(open~1,l!6,r!1,c).CaMKII(open~1,l!1,r!2,c).CaMKII(open~1,l!2,r!3,c).CaMKII(open~1,l!3,r!4,c).CaMKII(open~1,l!4,r!5,c).CaMKII(open~1,l!5,r!6,c)
	#Molecules CaMKII_open_pairs CaMKII(T286~0,open~1).CaMKII(T286~0,open~1)
	#Molecules CaMKII_open_T286P CaMKII(T286~P,open~1)

	#Molecules NMDAR_free NMDAR(camkii)
	#Molecules NMDAR_CaMKII CaMKII(cam,nmdar!1).NMDAR(camkii!1)

	#Molecules NMDAR_CaMKII_P CaMKII(T286~P,cam,nmdar!1).NMDAR(camkii!1)

	# Test for molecules that should not be there due to conditions in the model; all should be zero.
	#Molecules CaMKII_CaM_Ca4_closed CaM(ca~4,camkii!1).CaMKII(cam!1,T286~0,T306~0,nmdar,open~0) # CaM_Ca4 only binds to CaMKII if open~1
	#Molecules CaMKII_closed_T286P CaMKII(T286~P,open~0) # CaMKII T286P~1 has condition of open~1
	#Molecules NMDAR_CaMKII_closed CaMKII(open~0,cam,nmdar!1).NMDAR(camkii!1) # Only CaMKII open~1 binds to NMDARs

end observables


end model

generate_network({overwrite=>1}) #this command overwrites network everytime
#writeSBML()  
# Running for mcell:
simulate({method=>"ssa",t_start=>0,t_end=>"ITERATIONS",n_steps=>1000})
# Running only for bngl:
# left pp1 with 0, py file runs but only up to 0.01, why? ITERATIONS is what mcell reads
# not sure why: if I make ITERATIONS in python file to 100, it stops running at 30 iterations with 
# C:\mcell\rel\mcell\src4\count_buffer.cpp:94: MCell::CountBuffer::flush: Assertion `item.time == time && "Mismatch in gdat column times"' failed.
# simulate({method=>"ssa",t_end=>3,n_steps=>1e3}) 
